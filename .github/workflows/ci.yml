name: "CI"

on:
  push:
    branches: [main]
  pull_request:
    branches: "**"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [windows-2016]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download GraalVM
        if: matrix.os == 'windows-2016'
        run: Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-windows-amd64-21.1.0.zip -OutFile 'graal.zip'

      - name: Install GraalVM
        if: matrix.os == 'windows-2016'
        run: Expand-Archive -path 'graal.zip' -destinationpath '.'

      - name: Install Native Image
        if: matrix.os == 'windows-2016'
        run: graalvm-ce-java11-21.1.0\bin\gu.cmd install native-image

      - name: Set up Visual C Build Tools Workload for Visual Studio 2017 Build Tools
        if: matrix.os == 'windows-2016'
        run: |
          choco install visualstudio2017-workload-vctools

      # - name: Set up JDK 11
      #   if: matrix.os != 'windows-2016'
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: "11"

      # - name: Cache Maven packages
      #   if: matrix.os != 'windows-2016'
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2

      - name: Set up GOLANG 1.16
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"

      - name: Set long paths for Windows
        if: matrix.os == 'windows-2016'
        run: git config --system core.longpaths true

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      # - name: Build macOS
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     brew install maven make && \
      #     wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-darwin-amd64-21.1.0.tar.gz && \
      #     tar -xzf graalvm-ce-java11-darwin-amd64-21.1.0.tar.gz && \
      #     sudo mv graalvm-ce-java11-21.1.0 /Library/Java/JavaVirtualMachines
      #     export PATH=/Library/Java/JavaVirtualMachines/graalvm-ce-java11-21.1.0/Contents/Home/bin:$PATH && \
      #     export GRAALVM_HOME=/Library/Java/JavaVirtualMachines/graalvm-ce-java11-21.1.0/Contents/Home && \
      #     gu install native-image && \
      #     make macos

      # - name: Upload macOS runner
      #   if: matrix.os == 'macos-latest'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: dmn_runner_macos
      #     path: "./scripts/macos/target/Kogito.dmg"

      # - name: Build Linux
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo apt update && \
      #     sudo apt install -y \
      #     build-essential \
      #     maven \
      #     libgtk-3-dev \
      #     libappindicator3-dev \
      #     gir1.2-appindicator3-0.1 && \
      #     make linux

      # - name: Upload Linux runner
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: dmn_runner_linux
      #     path: "./build/linux/dmn_runner_linux.tar.gz"

      - name: Set GraalVM
        if: matrix.os == 'windows-2016'
        run: |
          echo "D:\a\kogito-tooling-go\kogito-tooling-go\graalvm-ce-java11-21.1.0\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append &&
          echo "JAVA_HOME=D:\a\kogito-tooling-go\kogito-tooling-go\graalvm-ce-java11-21.1.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build Windows
        if: matrix.os == 'windows-2016'
        shell: cmd
        env:
          JAVA_HOME: ./graalvm-ce-java11-21.1.0
        run: |
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools"
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC"
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary"
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build"
          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          make win

      # - name: Upload Windows runner
      #   if: matrix.os == 'windows-2016'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: dmn_runner_windows
      #     path: "./build/win/dmn_runner.exe"
